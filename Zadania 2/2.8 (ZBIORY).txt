Python 3.11.4 (tags/v3.11.4:d2340ef, Jun  7 2023, 05:45:37) [MSC v.1934 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license()" for more information.

>>> dir(set)
['__and__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__iand__', '__init__', '__init_subclass__', '__ior__', '__isub__', '__iter__', '__ixor__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'add', 'clear', 'copy', 'difference', 'difference_update', 'discard', 'intersection', 'intersection_update', 'isdisjoint', 'issubset', 'issuperset', 'pop', 'remove', 'symmetric_difference', 'symmetric_difference_update', 'union', 'update']
>>> dir(frozenset)
['__and__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getstate__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__ne__', '__new__', '__or__', '__rand__', '__reduce__', '__reduce_ex__', '__repr__', '__ror__', '__rsub__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__xor__', 'copy', 'difference', 'intersection', 'isdisjoint', 'issubset', 'issuperset', 'symmetric_difference', 'union']

>>> # operacje
>>> l1 = [2, 3, 1, 6, 7, 9, 10, 2, 0, -1, 1]
>>> s1 = set(l1)
>>> s1
{0, 1, 2, 3, 6, 7, 9, 10, -1}
>>> s2 = set([8, 9, 5, 6, 7, 1, 2, 9, 0, 10])
>>> s2
{0, 1, 2, 5, 6, 7, 8, 9, 10}
>>> len(l1), len(s1)
(11, 9)
>>> 4 in s1
False
>>> s1.union(s2)
{0, 1, 2, 3, 5, 6, 7, 8, 9, 10, -1}
>>> s2.union(s1)
{0, 1, 2, 3, 5, 6, 7, 8, 9, 10, -1}
>>> s1.intersection(s2)
{0, 1, 2, 6, 7, 9, 10}
>>> s1 & s2
{0, 1, 2, 6, 7, 9, 10}
>>> s1.difference(s2)
{3, -1}
>>> s3 = s1 - s2
>>> s3
{3, -1}
>>> s3.issubset(s1)
True
>>> s4 = set([4, -2])
>>> s4.isdisjoint(s3)
True

>>> # mutable sets
>>> s1.update(s4)
>>> s1
{0, 1, 2, 3, 4, 6, 7, 9, 10, -2, -1}
>>> s2.update([-1, 4])
>>> s2
{0, 1, 2, 4, 5, 6, 7, 8, 9, 10, -1}
>>> s1 -= s2
>>> s1
{3, -2}
>>> s1.add(7)
>>> s1
{3, 7, -2}
>>> s1.pop()
3

>>> # frozensets
>>> s5 = frozenset([4, 7, 12, -6])
>>> s5.intersection(s4)
frozenset({4})
>>> s2.issuperset(s5.intersection(s4))
True
>>> s6 = s5.union(s2)
>>> s6
frozenset({0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, -6, -1})
>>> s7 = s2.union(s5)
>>> s7
{0, 1, 2, 4, 5, 6, 7, 8, 9, 10, 12, -6, -1}
>>> type(s6), type(s7)
(<class 'frozenset'>, <class 'set'>)

>>> # usunięcie duplikatów z listy
>>> l = ['ola', 'ala', 'ela', 'ula', 'ewa', 'ola', 'ela']
>>> l = list(set(l))
>>> l
['ala', 'ola', 'ula', 'ela', 'ewa']

>>> # set comprehension
>>> {n for n in [4, 6, 1, 2, 9, 0, 2, 1]}
{0, 1, 2, 4, 6, 9}
>>> {(x, y) for x in range(1, 4) for y in range (3, 6)}
{(2, 4), (3, 4), (1, 5), (1, 4), (2, 3), (3, 3), (2, 5), (1, 3), (3, 5)}
